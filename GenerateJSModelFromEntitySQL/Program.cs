using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Data;
using System.Data.SqlClient;
using System.Data.OleDb;
using System.Reflection;
using GenerateJSModelFromEntitySQLFunctions;
using GenerateJSModelFromEntitySQL;
using System.Data.Entity.Infrastructure;

namespace GenerateJSModelFromEntitySQL
{
    class Program
    {
        static void Main(string[] args)
        {
            Application app = new Application();

            app.Defaults();
            string ModelName = "GenerateJSModelFromEntitySQL"; //Name of modal generated by entity framework
            app.getTables(ModelName);
            app.BuildFiles();
        }
    }
}

namespace GenerateJSModelFromEntitySQLFunctions
{
    public class Application
    {
        List<TableStructure> dbStruct { get; set; }
        String AppPath { get; set; }

        public void Defaults()
        {
            AppPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
        }

        public void getTables(string ModelName)
        {
            dbStruct = new List<TableStructure>();

            var db = new WidgetSampleDBEntities();

            Type efType = db.GetType();

            IList<PropertyInfo> tables = new List<PropertyInfo>(efType.GetProperties());

            foreach (PropertyInfo table in tables)
            {
                string tableName = table.PropertyType.BaseType.FullName.ToString();
                if (tableName == "System.Object")
                {
                    continue;
                }

                tableName = tableName.Substring(tableName.LastIndexOf('[')).Replace("[", "").Split(',')[0];

                TableStructure tableStruct = new TableStructure();
                tableStruct.TableName = tableName.Split('.')[tableName.Split('.').Count() - 1];

                tableStruct.Columns = new List<ColumnStructure>();

                string x = tableStruct.TableName;

                var ClassName = Type.GetType(x);
                var ClassNameX = Type.GetType(tableName);

                object tObj = Activator.CreateInstance(Type.GetType(ModelName + "." + tableStruct.TableName + ", " + ModelName));

                PropertyInfo[] columns = (tObj.GetType()).GetProperties();

                foreach (PropertyInfo column in columns)
                {
                    ColumnStructure columnStructure = new ColumnStructure();
                    columnStructure.ColumnName = column.Name;
                    columnStructure.ColumnType = column.PropertyType.ToString().Replace("System.Nullable`1", "").Replace("{", "").Replace("}", "").Replace("[", "").Replace("]", "").Replace("16", "").Replace("32", "").Split('.')[1].ToLower();
                    columnStructure.ColumnDescription = GetColumnDescription(tableStruct.TableName, columnStructure.ColumnName);

                    tableStruct.Columns.Add(columnStructure);
                }

                dbStruct.Add(tableStruct);
            }

        }

        public string GetColumnDescription(string Table, string ColumnName)
        {
            //This is for future use for generating documentation. Before you notify me yes we could get all of the above information from SQL but EntityFramework renames objects (plural and singular) and I wanted to use the model on the c# side.

            if (Table == null || ColumnName == null || Table.Length <= 0 || ColumnName.Length <= 0)
            {
                return "";
            }

            string strSql = $@"SELECT [Description] = s.value 
                FROM INFORMATION_SCHEMA.COLUMNS i 
                LEFT OUTER JOIN sys.extended_properties s 
                ON s.major_id = OBJECT_ID(i.TABLE_SCHEMA+'.'+i.TABLE_NAME) AND s.minor_id = i.ORDINAL_POSITION AND s.name = 'MS_Description' 
                WHERE OBJECTPROPERTY(OBJECT_ID(i.TABLE_SCHEMA+'.'+i.TABLE_NAME), 'IsMsShipped') = 0
                AND i.TABLE_NAME = '{Table}' AND i.COLUMN_NAME = '{ColumnName}'
                ORDER BY i.TABLE_NAME, i.ORDINAL_POSITION";

            var db = new WidgetSampleDBEntities();

            string ColumnDescription = "";

            ColumnDescription = db.Database.SqlQuery<string>(strSql).FirstOrDefault();

            return ColumnDescription;
        }

        public class TableStructure
        {
            public string TableName { get; set; }
            public List<ColumnStructure> Columns { get; set; }
        }

        public class ColumnStructure
        {
            public string ColumnName { get; set; }
            public string ColumnType { get; set; }
            public string ColumnDescription { get; set; }
        }

        public void BuildFiles()
        {
            string DataModelGenPath = AppDomain.CurrentDomain.BaseDirectory.ToString();
            string DataModelGenSolutionPath = DataModelGenPath.Split(new string[] { "GenerateJSModelFromEntitySQL" }, StringSplitOptions.None)[0];

            string LastUpdated = "Last Updated: " + DateTime.Now.ToString();

            string WarningMsg = $@"/**
* Do Not Edit
* Generate JS Model From Entity SQL {LastUpdated}
* This file was generated programmatically using GenerateJSModelFromEntitySQL via the Entity Model & Rule Sets
* Do Not Edit
*/" + Environment.NewLine;

            string DataModelString = WarningMsg;
            DataModelString += "TableName|ColumnName|DataType|ColumnDescription" + Environment.NewLine;
            string jsDataStructure = WarningMsg;

            foreach (TableStructure table in dbStruct)
            {
                if (table.TableName == "sysdiagram")
                {
                    continue;
                }

                jsDataStructure += "class cls" + table.TableName + Environment.NewLine;
                jsDataStructure += "{" + Environment.NewLine + "\t" + "constructor()" + Environment.NewLine + "\t" + "{" + Environment.NewLine;

                foreach (ColumnStructure column in table.Columns)
                {
                    DataModelString += table.TableName + "|" + column.ColumnName + "|" + column.ColumnType + "|" + column.ColumnDescription + Environment.NewLine;

                    jsDataStructure += "\t\tthis." + column.ColumnName;
                    if (column.ColumnType == "boolean")
                    {
                        jsDataStructure += " = " + "false";
                    }
                    else if (column.ColumnType == "string")
                    {
                        jsDataStructure += " = " + "''";
                    }
                    else if (column.ColumnType == "int")
                    {
                        //FileContents += " = " + "0";
                        jsDataStructure += " = " + "null";
                    }
                    else if (column.ColumnType == "datetime")
                    {
                        //FileContents += " = " + "new Date()";
                        jsDataStructure += " = " + "null";
                    }
                    else if (column.ColumnType == "double")
                    {
                        //FileContents += " = " + "new Number(0)";
                        jsDataStructure += " = " + "null";
                    }
                    else if (column.ColumnType == "decimal")
                    {
                        //FileContents += " = " + "new Number(0)";
                        jsDataStructure += " = " + "null";
                    }
                    else if (column.ColumnType == "collections")
                    {
                        //FileContents += "";
                        jsDataStructure += " = " + "null";
                    }
                    else if (column.ColumnType == "datamodels")
                    {
                        //FileContents += "";
                        jsDataStructure += " = " + "null";
                    }
                    else
                    {
                        //FileContents += "";
                        jsDataStructure += " = " + "null";
                    }
                    jsDataStructure += ";";
                    jsDataStructure += Environment.NewLine;
                }

                jsDataStructure += "\t}" + Environment.NewLine;
                jsDataStructure += "}" + Environment.NewLine;
            }

            DataModelString += WarningMsg;

            jsDataStructure += WarningMsg;

            System.IO.File.WriteAllText(DataModelGenSolutionPath + "DataModelInfo" + ".txt", DataModelString);

            System.IO.File.WriteAllText(DataModelGenSolutionPath + "clsDataStructure" + ".js", jsDataStructure);
        }
    }
}